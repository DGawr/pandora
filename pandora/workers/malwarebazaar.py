#!/usr/bin/env python3

from __future__ import annotations

from malwarebazaar.api import Bazaar  # type: ignore[attr-defined]

from ..helpers import Status
from ..task import Task
from ..report import Report

from .base import BaseWorker


class MalwareBazaar(BaseWorker):

    apikey: str

    def __init__(self, module: str, worker_id: int, cache: str, timeout: str,
                 loglevel: int | None=None,
                 status_in_report: dict[str, str] | None=None,
                 **options: dict[str, str | int | bool]) -> None:
        super().__init__(module, worker_id, cache, timeout, loglevel, status_in_report, **options)
        if not self.apikey:
            self.disabled = True
            self.logger.warning('Disabled, missing apikey.')
            return
        self.client = Bazaar(self.apikey)

    def analyse(self, task: Task, report: Report, manual_trigger: bool=False) -> None:
        self.logger.debug(f'analysing file {task.file.path}...')
        try:
            result = self.client.query_hash(task.file.sha1)
        except Exception:
            report.status = Status.ERROR
            report.add_details('info', 'Unable to reach malwarebazaar.')
            return

        if result['query_status'] == 'unknown_auth_key':
            report.status = Status.ERROR
            report.add_details('Invalid key', "The auth key for this module is invalid, you need a new one.")
            return

        if result['query_status'] == 'hash_not_found':
            report.status = Status.NOTAPPLICABLE
            return

        if 'data' not in result:
            report.status = Status.ERROR
            report.add_details('Invalid response', f"The response is unexpected. This module needs an update: {result}")
            return

        # Hash is known so malicious
        report.status = Status.ALERT
        report.add_details('permaurl', f'https://bazaar.abuse.ch/sample/{task.file.sha256}')
        report.add_details('malicious', {'signature': result['data'][0]['signature'],
                           'tags': result['data'][0]['tags']})
